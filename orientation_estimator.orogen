name 'orientation_estimator'
version '1.0'

import_types_from "base"
import_types_from "aggregator"
import_types_from "orientationTypes.hpp"

using_library "aggregator"
using_library "quater_ikf"
using_library "quater_ukf"


task_context 'BaseEstimator' do
    needs_configuration

    #******************************
    #******* Input Ports **********
    #******************************
    input_port("imu_orientation", "/base/samples/RigidBodyState").
      needs_reliable_connection.
      doc 'IMU(XSens) init orientation in quaternion.'

    input_port("fog_samples","/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'optic gyro angular velocity 1D (Z axis).'

    #******************************
    #** Aggregator parameters ***** 
    #******************************
    stream_aligner() do
	align_port("imu_orientation", 0.01)
	align_port("fog_samples", 0.01)
	max_latency(0.3)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('attitude_b_g', '/base/samples/RigidBodyState');
      doc 'timestamped state vector holding orientation and angular velocity with respect to the Earth fixed frame (geographic frame).'

    #******************************
    #**** Location Properties *****
    #******************************
    property('latitude', 'double', 0.926478944).
	doc 'Latitude of Bremen in radians (equivalent to 53.083333 degrees).'

    property('longitude', 'double', 0.153588974).
	doc 'Longitude of Bremen in radians (equivalent to 8.8 degrees).'

    property('altitude', 'double', 12).
	doc 'Altitude of Bremen in meters'

    property('magnetic_declination', 'double', 0.023561944).
	doc 'Bremen magnetic declination in radians (equivalent to 1.35 degrees EAST).'

    property('magnetic_declination_mode', 'int', 1).
	doc 'The declination is positive when the magnetic north is east of true north'
	doc '1 is EAST, which means positive declination. 2 is WEST, which means negative declination.'
	
    property('dip_angle', 'double', 1.187696556).
	doc 'Dip angle of Bremen in radians (equivalent to 68.05 degrees ).'    

    #******************************
    #**** Sensor Properties *****
    #******************************
    # For FOG

    property "gbiasof", "/base/Vector3d"
	doc "bias offset in static regimen for the Gyroscopes"
	
    #******************************
    #**** Filter Properties *******
    #******************************
    property('orientation_cov', '/base/Matrix3d').
	doc 'override orientation covariance, if it is not NaN or zero.'
    property('angular_velocity_cov', '/base/Matrix3d').
	doc 'override angular velocity covariance, if it is not NaN or zero.'
	
    property('use_initial_heading', 'bool', false).
	doc 'true if initial heading parameter should be used.'
    property('initial_heading', 'double', 0.0).
	doc 'Initial heading in radians.'
	
    property('substract_earth_rotation', 'bool', true).
	doc 'true if the earth rotation should be substracted.'
	
    #******************************
    #********* Operations *********
    #******************************
    operation('resetHeading').
        returns('bool').
        argument('heading', 'double', 'heading').
        doc 'resets the current heading, optimally to the true north'

    port_driven
    
end


task_context 'IKFEstimator' do
    needs_configuration


    #******************************
    #******* Input Ports **********
    #******************************
    input_port("imu_orientation", "/base/samples/RigidBodyState").
      needs_reliable_connection.
      doc 'IMU (XSens) init orientation in quaternion.'

    input_port("fog_samples","/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'optic gyro angular velocity 1D (Z axis).'

    input_port("imu_samples", "/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'IMU data values (acc, gyros and magn).'

    #******************************
    #** Aggregator parameters ***** 
    #******************************
    stream_aligner() do
	align_port("imu_orientation", 0.01)
	align_port("imu_samples", 0.01)
	align_port("fog_samples", 0.01)
	max_latency(0.1)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('attitude_b_g', '/base/samples/RigidBodyState');
      doc 'timestamped state vector holding orientation and angular velocity with respect to the Earth fixed frame (geographic frame).'

    output_port("inputs_backup", "/base/samples/IMUSensors").
      doc 'Input data values (acc, gyros (X and Y from Xsens, Z from FOG).'


    #******************************
    #**** Location Properties *****
    #******************************
    property('latitude', 'double', 0.926478944).
	doc 'Latitude of Bremen in radians (equivalent to 53.083333 degrees).'

    property('longitude', 'double', 0.153588974).
	doc 'Longitude of Bremen in radians (equivalent to 8.8 degrees).'

    property('altitude', 'double', 12).
	doc 'Altitude of Bremen in meters'

    property('magnetic_declination', 'double', 0.023561944).
	doc 'Bremen magnetic declination in radians (equivalent to 1.35 degrees EAST).'

    property('magnetic_declination_mode', 'int', 1).
	doc 'The declination is positive when the magnetic north is east of true north'
	doc '1 is EAST, which means positive declination. 2 is WEST, which means negative declination.'
	
    property('dip_angle', 'double', 1.187696556).
	doc 'Dip angle of Bremen in radians (equivalent to 68.05 degrees ).'    

    #****************************
    #**** Adaptive Properties ***
    #****************************
    property('adaptive_config', 'orientation_estimator/AdaptiveAttitudeConfig').
        doc 'Adaptive estimation of external acceleration.'

    #******************************
    #**** Sensor Properties *****
    #******************************

    #**** For Gyroscopes ****

    property('gbiasof', '/base/Vector3d')
	doc 'bias offset in static regimen for the Gyroscopes'
    property "gyrorw", "/base/Vector3d"
	doc "angle random walk for gyroscopes (rad/sqrt(s))"
    property "gyrorrw", "/base/Vector3d"
	doc "rate random walk for gyroscopes (rad/s/sqrt(s))"

    #**** For Accelerometers ****

    property "abiasof", "/base/Vector3d"
	doc 'bias offset in static regimen for the Accelerometers'
    property "accrw", "/base/Vector3d"
	doc "velocity random walk for accelerometers (m/s/sqrt(s))"
    property "accrrw", "/base/Vector3d"
	doc "acceleration random walk for accelerometers (m/s^2/sqrt(s))"

    #**** Magnetometers ****

    property "magrw", "/base/Vector3d"
	doc "random walk for magnetometers"

    #******************************
    #**** Filter Properties *******
    #******************************
    property('delta_time', 'double', 0.01).
	doc 'Time in s between position readings (aprox values for Xsens and FOG)'
	doc 'This value is not used for the filter in the integration. This is only used for the noise matrices'

    property('use_magnetometers', 'bool', false).
	doc 'Include (true) or exclude (false) the magnetometers values in the correction step of the filter'

    port_driven
    
end

task_context 'UKFEstimator' do
    needs_configuration

    #******************************
    #******* Input Ports **********
    #******************************
    input_port("imu_orientation", "/base/samples/RigidBodyState").
      needs_reliable_connection.
      doc 'IMU(XSens) init orientation in quaternion.'

    input_port("fog_samples","/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'optic gyro angular velocity 1D (Z axis).'

    input_port("imu_samples", "/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'IMU data values (acc, gyros and magn).'

    #******************************
    #** Aggregator parameters ***** 
    #******************************
    stream_aligner() do
	align_port("imu_orientation", 0.01)
	align_port("imu_samples", 0.01)
	align_port("fog_samples", 0.01)
	max_latency(0.1)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('attitude_b_g', '/base/samples/RigidBodyState');
      doc 'timestamped state vector holding orientation and angular velocity with respect to the Earth fixed frame (geographic frame).'
    


    #******************************
    #**** Location Properties *****
    #******************************
    property('latitude', 'double', 0.926478944).
	doc 'Latitude of Bremen in radians (equivalent to 53.083333 degrees).'

    property('longitude', 'double', 0.153588974).
	doc 'Longitude of Bremen in radians (equivalent to 8.8 degrees).'

    property('altitude', 'double', 12).
	doc 'Altitude of Bremen in meters'

    property('magnetic_declination', 'double', 0.023561944).
	doc 'Bremen magnetic declination in radians (equivalent to 1.35 degrees EAST).'

    property('magnetic_declination_mode', 'int', 1).
	doc 'The declination is positive when the magnetic north is east of true north'
	doc '1 is EAST, which means positive declination. 2 is WEST, which means negative declination.'

    property('dip_angle', 'double', 1.187696556).
	doc 'Dip angle of Bremen in radians (equivalent to 68.05 degrees ).'    

    property('offset_angle', 'double', 0).
	doc 'offset to be substracted in yaw of the magnetometer initial angle. Useful for basin tests with fixed coordinate system. In radians.'    

    property('offset_angle_runtime', 'double', 0).
	doc 'offset to be substracted in yaw during runtime. In radians.'    

    #******************************
    #**** Sensor Properties *****
    #******************************
    
    #**** For Gyroscopes ****

    property('gbiasof', '/base/Vector3d')
	doc 'bias offset in static regimen for the Gyroscopes'
    property "gyrorw", "/base/Vector3d"
	doc "angle random walk for gyroscopes (rad/sqrt(s))"
    property "gyrorrw", "/base/Vector3d"
	doc "rate random walk for gyroscopes (rad/s/sqrt(s))"

    #**** For Accelerometers ****
    
    property "abiasof", "/base/Vector3d"
	doc 'bias offset in static regimen for the Accelerometers'
    property "accrw", "/base/Vector3d"
	doc "velocity random walk for accelerometers (m/s/sqrt(s))"
    property "accrrw", "/base/Vector3d"
	doc "acceleration random walk for accelerometers (m/s^2/sqrt(s))"

    #******************************
    #**** Filter Properties *******
    #******************************
    property('delta_time', 'double', 0.01).
	doc 'Time in s between position readings (aprox values for Xsens and FOG)'
	doc 'This value is not used for the filter in the integration. This is only used for the noise matrices'

    port_driven

end


task_context 'IKF' do
    needs_configuration

    #****************************
    #**** Filter Properties *****
    #****************************
    property('filter_configuration', 'orientation_estimator/FilterConfiguration').
	doc 'General configuration values to run the task'

    #*********************************************
    #**** Inertial Measurement Unit Properties ***
    #*********************************************
    property('inertial_noise_imu','orientation_estimator/InertialNoiseParameters').
	doc 'Noise parameters for the internal sensors of the IMU.'
	
    property('inertial_noise_fog','orientation_estimator/InertialNoiseParameters').
	doc 'Noise parameters for the internal sensors of the FOG.'

    #****************************
    #**** Adaptive Properties ***
    #****************************
    property('adaptive_config_acc_imu', 'orientation_estimator/AdaptiveAttitudeConfig').
	doc 'Adaptive estimation of external IMU acceleration.'

    property('adaptive_config_acc_fog', 'orientation_estimator/AdaptiveAttitudeConfig').
	doc 'Adaptive estimation of external FOG acceleration.'

    #******************************
    #**** Location Properties *****
    #******************************
    property('location',"orientation_estimator/LocationConfiguration").
	doc 'Localization properties related to the geographic place (i.e.: latitude, longitude, magnetic declination).'
	
    property('initial_heading', 'double').
	doc 'Initial heading in radians. This is only used if imu_orientation is not connected and north seeking isnt activated.'

    #******************************
    #******* Input Ports **********
    #******************************
    input_port("imu_samples", "/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'IMU data values (acc, gyros and magn).'
      
    input_port("fog_samples","/base/samples/IMUSensors").
      needs_reliable_connection.
      doc 'optic gyro angular velocity. (acc and gyros)'
      
    input_port("initial_orientation", "/base/samples/RigidBodyState").
      needs_reliable_connection.
      doc 'initial orientation. It is not nesesary to use this port.'

    #******************************
    #** Aggregator parameters ***** 
    #******************************
    transformer do
        transformation("imu", "body")
        transformation("fog", "body")
    
    	align_port("imu_samples", 0.01)
	align_port("fog_samples", 0.01)
	align_port("initial_orientation", 0.01)
	max_latency(0.1)
    end

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('attitude_b_g', '/base/samples/RigidBodyState');
      doc 'timestamped state vector holding orientation and angular velocity with respect to the Earth fixed frame (geographic frame).' 

    #******************************
    #********** States ************
    #******************************
    runtime_states :INITIAL_NORTH_SEEKING, :INITIAL_ALIGNMENT, :MISSING_TRANSFORMATION
    exception_states :NAN_ERROR, :ALIGNMENT_ERROR, :CONFIGURATION_ERROR
      
    port_driven
end

